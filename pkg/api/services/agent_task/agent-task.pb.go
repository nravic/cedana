// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: agent-task.proto

package agent_task

import (
	gpu "github.com/cedana/cedana/pkg/api/services/gpu"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckpointState int32

const (
	CheckpointState_CHECKPOINTED      CheckpointState = 0
	CheckpointState_CHECKPOINT_FAILED CheckpointState = 1
	CheckpointState_RESTORED          CheckpointState = 2
	CheckpointState_RESTORE_FAILED    CheckpointState = 3
)

// Enum value maps for CheckpointState.
var (
	CheckpointState_name = map[int32]string{
		0: "CHECKPOINTED",
		1: "CHECKPOINT_FAILED",
		2: "RESTORED",
		3: "RESTORE_FAILED",
	}
	CheckpointState_value = map[string]int32{
		"CHECKPOINTED":      0,
		"CHECKPOINT_FAILED": 1,
		"RESTORED":          2,
		"RESTORE_FAILED":    3,
	}
)

func (x CheckpointState) Enum() *CheckpointState {
	p := new(CheckpointState)
	*p = x
	return p
}

func (x CheckpointState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckpointState) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_task_proto_enumTypes[0].Descriptor()
}

func (CheckpointState) Type() protoreflect.EnumType {
	return &file_agent_task_proto_enumTypes[0]
}

func (x CheckpointState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckpointState.Descriptor instead.
func (CheckpointState) EnumDescriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{0}
}

type JobState int32

const (
	JobState_JOB_STARTUP_FAILED JobState = 0
	JobState_JOB_KILLED         JobState = 1
	JobState_JOB_IDLE           JobState = 2
	JobState_JOB_RUNNING        JobState = 3
	JobState_JOB_PENDING        JobState = 4
	JobState_JOB_DONE           JobState = 5
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0: "JOB_STARTUP_FAILED",
		1: "JOB_KILLED",
		2: "JOB_IDLE",
		3: "JOB_RUNNING",
		4: "JOB_PENDING",
		5: "JOB_DONE",
	}
	JobState_value = map[string]int32{
		"JOB_STARTUP_FAILED": 0,
		"JOB_KILLED":         1,
		"JOB_IDLE":           2,
		"JOB_RUNNING":        3,
		"JOB_PENDING":        4,
		"JOB_DONE":           5,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_task_proto_enumTypes[1].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_agent_task_proto_enumTypes[1]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobState.Descriptor instead.
func (JobState) EnumDescriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{1}
}

type ContainerRuntime int32

const (
	ContainerRuntime_CRIO       ContainerRuntime = 0
	ContainerRuntime_CONTAINERD ContainerRuntime = 1
)

// Enum value maps for ContainerRuntime.
var (
	ContainerRuntime_name = map[int32]string{
		0: "CRIO",
		1: "CONTAINERD",
	}
	ContainerRuntime_value = map[string]int32{
		"CRIO":       0,
		"CONTAINERD": 1,
	}
)

func (x ContainerRuntime) Enum() *ContainerRuntime {
	p := new(ContainerRuntime)
	*p = x
	return p
}

func (x ContainerRuntime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerRuntime) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_task_proto_enumTypes[2].Descriptor()
}

func (ContainerRuntime) Type() protoreflect.EnumType {
	return &file_agent_task_proto_enumTypes[2]
}

func (x ContainerRuntime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerRuntime.Descriptor instead.
func (ContainerRuntime) EnumDescriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{2}
}

type CRType int32

const (
	CRType_LOCAL  CRType = 0
	CRType_REMOTE CRType = 1
)

// Enum value maps for CRType.
var (
	CRType_name = map[int32]string{
		0: "LOCAL",
		1: "REMOTE",
	}
	CRType_value = map[string]int32{
		"LOCAL":  0,
		"REMOTE": 1,
	}
)

func (x CRType) Enum() *CRType {
	p := new(CRType)
	*p = x
	return p
}

func (x CRType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CRType) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_task_proto_enumTypes[3].Descriptor()
}

func (CRType) Type() protoreflect.EnumType {
	return &file_agent_task_proto_enumTypes[3]
}

func (x CRType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CRType.Descriptor instead.
func (CRType) EnumDescriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{3}
}

type DumpType int32

const (
	DumpType_PROCESS DumpType = 0
	DumpType_RUNC    DumpType = 1
	DumpType_KATA    DumpType = 2
	DumpType_ROOTFS  DumpType = 3
)

// Enum value maps for DumpType.
var (
	DumpType_name = map[int32]string{
		0: "PROCESS",
		1: "RUNC",
		2: "KATA",
		3: "ROOTFS",
	}
	DumpType_value = map[string]int32{
		"PROCESS": 0,
		"RUNC":    1,
		"KATA":    2,
		"ROOTFS":  3,
	}
)

func (x DumpType) Enum() *DumpType {
	p := new(DumpType)
	*p = x
	return p
}

func (x DumpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DumpType) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_task_proto_enumTypes[4].Descriptor()
}

func (DumpType) Type() protoreflect.EnumType {
	return &file_agent_task_proto_enumTypes[4]
}

func (x DumpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DumpType.Descriptor instead.
func (DumpType) EnumDescriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{4}
}

type OpenFilesStat_StreamType int32

const (
	OpenFilesStat_STDIN  OpenFilesStat_StreamType = 0
	OpenFilesStat_STDOUT OpenFilesStat_StreamType = 1
	OpenFilesStat_STDERR OpenFilesStat_StreamType = 2
	OpenFilesStat_NONE   OpenFilesStat_StreamType = 3
)

// Enum value maps for OpenFilesStat_StreamType.
var (
	OpenFilesStat_StreamType_name = map[int32]string{
		0: "STDIN",
		1: "STDOUT",
		2: "STDERR",
		3: "NONE",
	}
	OpenFilesStat_StreamType_value = map[string]int32{
		"STDIN":  0,
		"STDOUT": 1,
		"STDERR": 2,
		"NONE":   3,
	}
)

func (x OpenFilesStat_StreamType) Enum() *OpenFilesStat_StreamType {
	p := new(OpenFilesStat_StreamType)
	*p = x
	return p
}

func (x OpenFilesStat_StreamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenFilesStat_StreamType) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_task_proto_enumTypes[5].Descriptor()
}

func (OpenFilesStat_StreamType) Type() protoreflect.EnumType {
	return &file_agent_task_proto_enumTypes[5]
}

func (x OpenFilesStat_StreamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenFilesStat_StreamType.Descriptor instead.
func (OpenFilesStat_StreamType) EnumDescriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{7, 0}
}

type DetailedHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UID    int32   `protobuf:"varint,1,opt,name=UID,proto3" json:"UID,omitempty"`
	GID    int32   `protobuf:"varint,2,opt,name=GID,proto3" json:"GID,omitempty"`
	Groups []int32 `protobuf:"varint,3,rep,packed,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *DetailedHealthCheckRequest) Reset() {
	*x = DetailedHealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedHealthCheckRequest) ProtoMessage() {}

func (x *DetailedHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*DetailedHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{0}
}

func (x *DetailedHealthCheckRequest) GetUID() int32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *DetailedHealthCheckRequest) GetGID() int32 {
	if x != nil {
		return x.GID
	}
	return 0
}

func (x *DetailedHealthCheckRequest) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

type DetailedHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthCheckStats *HealthCheckStats `protobuf:"bytes,1,opt,name=HealthCheckStats,proto3" json:"HealthCheckStats,omitempty"`
	UnhealthyReasons []string          `protobuf:"bytes,2,rep,name=unhealthyReasons,proto3" json:"unhealthyReasons,omitempty"`
}

func (x *DetailedHealthCheckResponse) Reset() {
	*x = DetailedHealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedHealthCheckResponse) ProtoMessage() {}

func (x *DetailedHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*DetailedHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{1}
}

func (x *DetailedHealthCheckResponse) GetHealthCheckStats() *HealthCheckStats {
	if x != nil {
		return x.HealthCheckStats
	}
	return nil
}

func (x *DetailedHealthCheckResponse) GetUnhealthyReasons() []string {
	if x != nil {
		return x.UnhealthyReasons
	}
	return nil
}

type HealthCheckStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CriuVersion    string                   `protobuf:"bytes,1,opt,name=criuVersion,proto3" json:"criuVersion,omitempty"`
	GPUHealthCheck *gpu.HealthCheckResponse `protobuf:"bytes,2,opt,name=GPUHealthCheck,proto3" json:"GPUHealthCheck,omitempty"`
}

func (x *HealthCheckStats) Reset() {
	*x = HealthCheckStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckStats) ProtoMessage() {}

func (x *HealthCheckStats) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckStats.ProtoReflect.Descriptor instead.
func (*HealthCheckStats) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{2}
}

func (x *HealthCheckStats) GetCriuVersion() string {
	if x != nil {
		return x.CriuVersion
	}
	return ""
}

func (x *HealthCheckStats) GetGPUHealthCheck() *gpu.HealthCheckResponse {
	if x != nil {
		return x.GPUHealthCheck
	}
	return nil
}

type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{3}
}

type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JSON string `protobuf:"bytes,1,opt,name=JSON,proto3" json:"JSON,omitempty"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{4}
}

func (x *GetConfigResponse) GetJSON() string {
	if x != nil {
		return x.JSON
	}
	return ""
}

type ProcessState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID             int32           `protobuf:"varint,1,opt,name=PID,proto3" json:"PID,omitempty"`
	Task            string          `protobuf:"bytes,2,opt,name=Task,proto3" json:"Task,omitempty"`
	ContainerID     string          `protobuf:"bytes,4,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	StartedAt       string          `protobuf:"bytes,5,opt,name=StartedAt,proto3" json:"StartedAt,omitempty"`
	ProcessInfo     *ProcessInfo    `protobuf:"bytes,6,opt,name=ProcessInfo,proto3" json:"ProcessInfo,omitempty"`
	CheckpointPath  string          `protobuf:"bytes,7,opt,name=CheckpointPath,proto3" json:"CheckpointPath,omitempty"`
	CheckpointState CheckpointState `protobuf:"varint,8,opt,name=CheckpointState,proto3,enum=cedana.services.agent_task.CheckpointState" json:"CheckpointState,omitempty"`
	JobState        JobState        `protobuf:"varint,9,opt,name=JobState,proto3,enum=cedana.services.agent_task.JobState" json:"JobState,omitempty"`
	RemoteState     []*RemoteState  `protobuf:"bytes,10,rep,name=RemoteState,proto3" json:"RemoteState,omitempty"`
	GPUCheckpointed bool            `protobuf:"varint,11,opt,name=GPUCheckpointed,proto3" json:"GPUCheckpointed,omitempty"`
	JID             string          `protobuf:"bytes,12,opt,name=JID,proto3" json:"JID,omitempty"`
	HostInfo        *HostInfo       `protobuf:"bytes,13,opt,name=HostInfo,proto3" json:"HostInfo,omitempty"`
	CPUInfo         *CPUInfo        `protobuf:"bytes,14,opt,name=CPUInfo,proto3" json:"CPUInfo,omitempty"`
	MemoryInfo      *MemoryInfo     `protobuf:"bytes,15,opt,name=MemoryInfo,proto3" json:"MemoryInfo,omitempty"`
	UIDs            []int32         `protobuf:"varint,16,rep,packed,name=UIDs,proto3" json:"UIDs,omitempty"`
	GIDs            []int32         `protobuf:"varint,17,rep,packed,name=GIDs,proto3" json:"GIDs,omitempty"`
	Groups          []int32         `protobuf:"varint,18,rep,packed,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *ProcessState) Reset() {
	*x = ProcessState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessState) ProtoMessage() {}

func (x *ProcessState) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessState.ProtoReflect.Descriptor instead.
func (*ProcessState) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{5}
}

func (x *ProcessState) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *ProcessState) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *ProcessState) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *ProcessState) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *ProcessState) GetProcessInfo() *ProcessInfo {
	if x != nil {
		return x.ProcessInfo
	}
	return nil
}

func (x *ProcessState) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *ProcessState) GetCheckpointState() CheckpointState {
	if x != nil {
		return x.CheckpointState
	}
	return CheckpointState_CHECKPOINTED
}

func (x *ProcessState) GetJobState() JobState {
	if x != nil {
		return x.JobState
	}
	return JobState_JOB_STARTUP_FAILED
}

func (x *ProcessState) GetRemoteState() []*RemoteState {
	if x != nil {
		return x.RemoteState
	}
	return nil
}

func (x *ProcessState) GetGPUCheckpointed() bool {
	if x != nil {
		return x.GPUCheckpointed
	}
	return false
}

func (x *ProcessState) GetJID() string {
	if x != nil {
		return x.JID
	}
	return ""
}

func (x *ProcessState) GetHostInfo() *HostInfo {
	if x != nil {
		return x.HostInfo
	}
	return nil
}

func (x *ProcessState) GetCPUInfo() *CPUInfo {
	if x != nil {
		return x.CPUInfo
	}
	return nil
}

func (x *ProcessState) GetMemoryInfo() *MemoryInfo {
	if x != nil {
		return x.MemoryInfo
	}
	return nil
}

func (x *ProcessState) GetUIDs() []int32 {
	if x != nil {
		return x.UIDs
	}
	return nil
}

func (x *ProcessState) GetGIDs() []int32 {
	if x != nil {
		return x.GIDs
	}
	return nil
}

func (x *ProcessState) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID                     int32             `protobuf:"varint,1,opt,name=PID,proto3" json:"PID,omitempty"`
	AttachedToHardwareAccel bool              `protobuf:"varint,2,opt,name=AttachedToHardwareAccel,proto3" json:"AttachedToHardwareAccel,omitempty"`
	OpenFds                 []*OpenFilesStat  `protobuf:"bytes,3,rep,name=OpenFds,proto3" json:"OpenFds,omitempty"`
	WorkingDir              string            `protobuf:"bytes,4,opt,name=WorkingDir,proto3" json:"WorkingDir,omitempty"`
	OpenConnections         []*ConnectionStat `protobuf:"bytes,5,rep,name=OpenConnections,proto3" json:"OpenConnections,omitempty"`
	MemoryPercent           float32           `protobuf:"fixed32,6,opt,name=MemoryPercent,proto3" json:"MemoryPercent,omitempty"`
	IsRunning               bool              `protobuf:"varint,7,opt,name=IsRunning,proto3" json:"IsRunning,omitempty"`
	Status                  string            `protobuf:"bytes,8,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessInfo) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *ProcessInfo) GetAttachedToHardwareAccel() bool {
	if x != nil {
		return x.AttachedToHardwareAccel
	}
	return false
}

func (x *ProcessInfo) GetOpenFds() []*OpenFilesStat {
	if x != nil {
		return x.OpenFds
	}
	return nil
}

func (x *ProcessInfo) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *ProcessInfo) GetOpenConnections() []*ConnectionStat {
	if x != nil {
		return x.OpenConnections
	}
	return nil
}

func (x *ProcessInfo) GetMemoryPercent() float32 {
	if x != nil {
		return x.MemoryPercent
	}
	return 0
}

func (x *ProcessInfo) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *ProcessInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type OpenFilesStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string                   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Fd     uint64                   `protobuf:"varint,2,opt,name=Fd,proto3" json:"Fd,omitempty"`
	Mode   string                   `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Stream OpenFilesStat_StreamType `protobuf:"varint,5,opt,name=Stream,proto3,enum=cedana.services.agent_task.OpenFilesStat_StreamType" json:"Stream,omitempty"`
}

func (x *OpenFilesStat) Reset() {
	*x = OpenFilesStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenFilesStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFilesStat) ProtoMessage() {}

func (x *OpenFilesStat) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFilesStat.ProtoReflect.Descriptor instead.
func (*OpenFilesStat) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{7}
}

func (x *OpenFilesStat) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OpenFilesStat) GetFd() uint64 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *OpenFilesStat) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *OpenFilesStat) GetStream() OpenFilesStat_StreamType {
	if x != nil {
		return x.Stream
	}
	return OpenFilesStat_STDIN
}

type ConnectionStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fd     uint32  `protobuf:"varint,1,opt,name=Fd,proto3" json:"Fd,omitempty"`
	Family uint32  `protobuf:"varint,2,opt,name=Family,proto3" json:"Family,omitempty"`
	Type   uint32  `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Laddr  *Addr   `protobuf:"bytes,4,opt,name=Laddr,proto3" json:"Laddr,omitempty"`
	Raddr  *Addr   `protobuf:"bytes,5,opt,name=Raddr,proto3" json:"Raddr,omitempty"`
	Status string  `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	UIDs   []int32 `protobuf:"varint,7,rep,packed,name=UIDs,proto3" json:"UIDs,omitempty"`
	PID    int32   `protobuf:"varint,8,opt,name=PID,proto3" json:"PID,omitempty"`
}

func (x *ConnectionStat) Reset() {
	*x = ConnectionStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionStat) ProtoMessage() {}

func (x *ConnectionStat) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionStat.ProtoReflect.Descriptor instead.
func (*ConnectionStat) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{8}
}

func (x *ConnectionStat) GetFd() uint32 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *ConnectionStat) GetFamily() uint32 {
	if x != nil {
		return x.Family
	}
	return 0
}

func (x *ConnectionStat) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ConnectionStat) GetLaddr() *Addr {
	if x != nil {
		return x.Laddr
	}
	return nil
}

func (x *ConnectionStat) GetRaddr() *Addr {
	if x != nil {
		return x.Raddr
	}
	return nil
}

func (x *ConnectionStat) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ConnectionStat) GetUIDs() []int32 {
	if x != nil {
		return x.UIDs
	}
	return nil
}

func (x *ConnectionStat) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

type Addr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP   string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *Addr) Reset() {
	*x = Addr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addr) ProtoMessage() {}

func (x *Addr) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addr.ProtoReflect.Descriptor instead.
func (*Addr) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{9}
}

func (x *Addr) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Addr) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type RemoteState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckpointID string `protobuf:"bytes,1,opt,name=CheckpointID,proto3" json:"CheckpointID,omitempty"`
	UploadID     string `protobuf:"bytes,2,opt,name=UploadID,proto3" json:"UploadID,omitempty"`
	Timestamp    int64  `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *RemoteState) Reset() {
	*x = RemoteState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteState) ProtoMessage() {}

func (x *RemoteState) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteState.ProtoReflect.Descriptor instead.
func (*RemoteState) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{10}
}

func (x *RemoteState) GetCheckpointID() string {
	if x != nil {
		return x.CheckpointID
	}
	return ""
}

func (x *RemoteState) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

func (x *RemoteState) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostID               string `protobuf:"bytes,1,opt,name=HostID,proto3" json:"HostID,omitempty"`
	Hostname             string `protobuf:"bytes,4,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	OS                   string `protobuf:"bytes,5,opt,name=OS,proto3" json:"OS,omitempty"`
	Platform             string `protobuf:"bytes,6,opt,name=Platform,proto3" json:"Platform,omitempty"`
	KernelVersion        string `protobuf:"bytes,7,opt,name=KernelVersion,proto3" json:"KernelVersion,omitempty"`
	KernelArch           string `protobuf:"bytes,8,opt,name=KernelArch,proto3" json:"KernelArch,omitempty"`
	VirtualizationSystem string `protobuf:"bytes,9,opt,name=VirtualizationSystem,proto3" json:"VirtualizationSystem,omitempty"`
	VirtualizationRole   string `protobuf:"bytes,10,opt,name=VirtualizationRole,proto3" json:"VirtualizationRole,omitempty"`
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{11}
}

func (x *HostInfo) GetHostID() string {
	if x != nil {
		return x.HostID
	}
	return ""
}

func (x *HostInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostInfo) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *HostInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *HostInfo) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *HostInfo) GetKernelArch() string {
	if x != nil {
		return x.KernelArch
	}
	return ""
}

func (x *HostInfo) GetVirtualizationSystem() string {
	if x != nil {
		return x.VirtualizationSystem
	}
	return ""
}

func (x *HostInfo) GetVirtualizationRole() string {
	if x != nil {
		return x.VirtualizationRole
	}
	return ""
}

type CPUInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count      int32  `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	CPU        int32  `protobuf:"varint,2,opt,name=CPU,proto3" json:"CPU,omitempty"`
	VendorID   string `protobuf:"bytes,3,opt,name=VendorID,proto3" json:"VendorID,omitempty"`
	Family     string `protobuf:"bytes,4,opt,name=Family,proto3" json:"Family,omitempty"`
	PhysicalID string `protobuf:"bytes,5,opt,name=PhysicalID,proto3" json:"PhysicalID,omitempty"`
}

func (x *CPUInfo) Reset() {
	*x = CPUInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUInfo) ProtoMessage() {}

func (x *CPUInfo) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUInfo.ProtoReflect.Descriptor instead.
func (*CPUInfo) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{12}
}

func (x *CPUInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CPUInfo) GetCPU() int32 {
	if x != nil {
		return x.CPU
	}
	return 0
}

func (x *CPUInfo) GetVendorID() string {
	if x != nil {
		return x.VendorID
	}
	return ""
}

func (x *CPUInfo) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *CPUInfo) GetPhysicalID() string {
	if x != nil {
		return x.PhysicalID
	}
	return ""
}

type MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     uint64 `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	Available uint64 `protobuf:"varint,2,opt,name=Available,proto3" json:"Available,omitempty"`
	Used      uint64 `protobuf:"varint,3,opt,name=Used,proto3" json:"Used,omitempty"`
}

func (x *MemoryInfo) Reset() {
	*x = MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryInfo) ProtoMessage() {}

func (x *MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryInfo.ProtoReflect.Descriptor instead.
func (*MemoryInfo) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{13}
}

func (x *MemoryInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MemoryInfo) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *MemoryInfo) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

type DumpStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DumpType            DumpType             `protobuf:"varint,1,opt,name=DumpType,proto3,enum=cedana.services.agent_task.DumpType" json:"DumpType,omitempty"`
	PrepareDuration     int64                `protobuf:"varint,2,opt,name=PrepareDuration,proto3" json:"PrepareDuration,omitempty"`
	CRIUDuration        int64                `protobuf:"varint,3,opt,name=CRIUDuration,proto3" json:"CRIUDuration,omitempty"`
	GPUDuration         int64                `protobuf:"varint,4,opt,name=GPUDuration,proto3" json:"GPUDuration,omitempty"`
	UploadDuration      int64                `protobuf:"varint,5,opt,name=UploadDuration,proto3" json:"UploadDuration,omitempty"`
	ContainerRuntime    ContainerRuntime     `protobuf:"varint,6,opt,name=ContainerRuntime,proto3,enum=cedana.services.agent_task.ContainerRuntime" json:"ContainerRuntime,omitempty"`
	Kubernetes          bool                 `protobuf:"varint,7,opt,name=Kubernetes,proto3" json:"Kubernetes,omitempty"`
	CheckpointFileStats *CheckpointFileStats `protobuf:"bytes,8,opt,name=CheckpointFileStats,proto3" json:"CheckpointFileStats,omitempty"`
}

func (x *DumpStats) Reset() {
	*x = DumpStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpStats) ProtoMessage() {}

func (x *DumpStats) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpStats.ProtoReflect.Descriptor instead.
func (*DumpStats) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{14}
}

func (x *DumpStats) GetDumpType() DumpType {
	if x != nil {
		return x.DumpType
	}
	return DumpType_PROCESS
}

func (x *DumpStats) GetPrepareDuration() int64 {
	if x != nil {
		return x.PrepareDuration
	}
	return 0
}

func (x *DumpStats) GetCRIUDuration() int64 {
	if x != nil {
		return x.CRIUDuration
	}
	return 0
}

func (x *DumpStats) GetGPUDuration() int64 {
	if x != nil {
		return x.GPUDuration
	}
	return 0
}

func (x *DumpStats) GetUploadDuration() int64 {
	if x != nil {
		return x.UploadDuration
	}
	return 0
}

func (x *DumpStats) GetContainerRuntime() ContainerRuntime {
	if x != nil {
		return x.ContainerRuntime
	}
	return ContainerRuntime_CRIO
}

func (x *DumpStats) GetKubernetes() bool {
	if x != nil {
		return x.Kubernetes
	}
	return false
}

func (x *DumpStats) GetCheckpointFileStats() *CheckpointFileStats {
	if x != nil {
		return x.CheckpointFileStats
	}
	return nil
}

type RestoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DumpType            DumpType             `protobuf:"varint,1,opt,name=DumpType,proto3,enum=cedana.services.agent_task.DumpType" json:"DumpType,omitempty"`
	ContainerRuntime    ContainerRuntime     `protobuf:"varint,2,opt,name=ContainerRuntime,proto3,enum=cedana.services.agent_task.ContainerRuntime" json:"ContainerRuntime,omitempty"`
	PrepareDuration     int64                `protobuf:"varint,3,opt,name=PrepareDuration,proto3" json:"PrepareDuration,omitempty"`
	CRIUDuration        int64                `protobuf:"varint,4,opt,name=CRIUDuration,proto3" json:"CRIUDuration,omitempty"`
	GPUDuration         int64                `protobuf:"varint,5,opt,name=GPUDuration,proto3" json:"GPUDuration,omitempty"`
	DownloadDuration    int64                `protobuf:"varint,6,opt,name=DownloadDuration,proto3" json:"DownloadDuration,omitempty"`
	CheckpointFileStats *CheckpointFileStats `protobuf:"bytes,7,opt,name=CheckpointFileStats,proto3" json:"CheckpointFileStats,omitempty"`
	GPURestoreStats     *gpu.GPURestoreStats `protobuf:"bytes,8,opt,name=GPURestoreStats,proto3" json:"GPURestoreStats,omitempty"`
}

func (x *RestoreStats) Reset() {
	*x = RestoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreStats) ProtoMessage() {}

func (x *RestoreStats) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreStats.ProtoReflect.Descriptor instead.
func (*RestoreStats) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{15}
}

func (x *RestoreStats) GetDumpType() DumpType {
	if x != nil {
		return x.DumpType
	}
	return DumpType_PROCESS
}

func (x *RestoreStats) GetContainerRuntime() ContainerRuntime {
	if x != nil {
		return x.ContainerRuntime
	}
	return ContainerRuntime_CRIO
}

func (x *RestoreStats) GetPrepareDuration() int64 {
	if x != nil {
		return x.PrepareDuration
	}
	return 0
}

func (x *RestoreStats) GetCRIUDuration() int64 {
	if x != nil {
		return x.CRIUDuration
	}
	return 0
}

func (x *RestoreStats) GetGPUDuration() int64 {
	if x != nil {
		return x.GPUDuration
	}
	return 0
}

func (x *RestoreStats) GetDownloadDuration() int64 {
	if x != nil {
		return x.DownloadDuration
	}
	return 0
}

func (x *RestoreStats) GetCheckpointFileStats() *CheckpointFileStats {
	if x != nil {
		return x.CheckpointFileStats
	}
	return nil
}

func (x *RestoreStats) GetGPURestoreStats() *gpu.GPURestoreStats {
	if x != nil {
		return x.GPURestoreStats
	}
	return nil
}

type CheckpointFileStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     int64 `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	Duration int64 `protobuf:"varint,2,opt,name=Duration,proto3" json:"Duration,omitempty"`
}

func (x *CheckpointFileStats) Reset() {
	*x = CheckpointFileStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointFileStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointFileStats) ProtoMessage() {}

func (x *CheckpointFileStats) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointFileStats.ProtoReflect.Descriptor instead.
func (*CheckpointFileStats) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{16}
}

func (x *CheckpointFileStats) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CheckpointFileStats) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type DumpArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID            int32  `protobuf:"varint,1,opt,name=PID,proto3" json:"PID,omitempty"`
	Dir            string `protobuf:"bytes,2,opt,name=Dir,proto3" json:"Dir,omitempty"`
	Type           CRType `protobuf:"varint,3,opt,name=Type,proto3,enum=cedana.services.agent_task.CRType" json:"Type,omitempty"`
	JID            string `protobuf:"bytes,4,opt,name=JID,proto3" json:"JID,omitempty"`
	GPU            bool   `protobuf:"varint,5,opt,name=GPU,proto3" json:"GPU,omitempty"`
	TcpEstablished bool   `protobuf:"varint,6,opt,name=TcpEstablished,proto3" json:"TcpEstablished,omitempty"`
	Stream         bool   `protobuf:"varint,7,opt,name=Stream,proto3" json:"Stream,omitempty"`
}

func (x *DumpArgs) Reset() {
	*x = DumpArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpArgs) ProtoMessage() {}

func (x *DumpArgs) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpArgs.ProtoReflect.Descriptor instead.
func (*DumpArgs) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{17}
}

func (x *DumpArgs) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *DumpArgs) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *DumpArgs) GetType() CRType {
	if x != nil {
		return x.Type
	}
	return CRType_LOCAL
}

func (x *DumpArgs) GetJID() string {
	if x != nil {
		return x.JID
	}
	return ""
}

func (x *DumpArgs) GetGPU() bool {
	if x != nil {
		return x.GPU
	}
	return false
}

func (x *DumpArgs) GetTcpEstablished() bool {
	if x != nil {
		return x.TcpEstablished
	}
	return false
}

func (x *DumpArgs) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

type RestoreArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           CRType  `protobuf:"varint,1,opt,name=Type,proto3,enum=cedana.services.agent_task.CRType" json:"Type,omitempty"`
	CheckpointID   string  `protobuf:"bytes,2,opt,name=CheckpointID,proto3" json:"CheckpointID,omitempty"`
	CheckpointPath string  `protobuf:"bytes,3,opt,name=CheckpointPath,proto3" json:"CheckpointPath,omitempty"`
	JID            string  `protobuf:"bytes,4,opt,name=JID,proto3" json:"JID,omitempty"`
	UID            int32   `protobuf:"varint,5,opt,name=UID,proto3" json:"UID,omitempty"`
	GID            int32   `protobuf:"varint,6,opt,name=GID,proto3" json:"GID,omitempty"`
	Groups         []int32 `protobuf:"varint,7,rep,packed,name=Groups,proto3" json:"Groups,omitempty"`
	TcpEstablished bool    `protobuf:"varint,8,opt,name=TcpEstablished,proto3" json:"TcpEstablished,omitempty"`
	Stream         bool    `protobuf:"varint,9,opt,name=Stream,proto3" json:"Stream,omitempty"`
}

func (x *RestoreArgs) Reset() {
	*x = RestoreArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreArgs) ProtoMessage() {}

func (x *RestoreArgs) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreArgs.ProtoReflect.Descriptor instead.
func (*RestoreArgs) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{18}
}

func (x *RestoreArgs) GetType() CRType {
	if x != nil {
		return x.Type
	}
	return CRType_LOCAL
}

func (x *RestoreArgs) GetCheckpointID() string {
	if x != nil {
		return x.CheckpointID
	}
	return ""
}

func (x *RestoreArgs) GetCheckpointPath() string {
	if x != nil {
		return x.CheckpointPath
	}
	return ""
}

func (x *RestoreArgs) GetJID() string {
	if x != nil {
		return x.JID
	}
	return ""
}

func (x *RestoreArgs) GetUID() int32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *RestoreArgs) GetGID() int32 {
	if x != nil {
		return x.GID
	}
	return 0
}

func (x *RestoreArgs) GetGroups() []int32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RestoreArgs) GetTcpEstablished() bool {
	if x != nil {
		return x.TcpEstablished
	}
	return false
}

func (x *RestoreArgs) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

type DumpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string        `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	CheckpointID string        `protobuf:"bytes,2,opt,name=CheckpointID,proto3" json:"CheckpointID,omitempty"`
	UploadID     string        `protobuf:"bytes,3,opt,name=UploadID,proto3" json:"UploadID,omitempty"`
	State        *ProcessState `protobuf:"bytes,4,opt,name=State,proto3" json:"State,omitempty"`
	DumpStats    *DumpStats    `protobuf:"bytes,5,opt,name=DumpStats,proto3" json:"DumpStats,omitempty"`
}

func (x *DumpResp) Reset() {
	*x = DumpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpResp) ProtoMessage() {}

func (x *DumpResp) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpResp.ProtoReflect.Descriptor instead.
func (*DumpResp) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{19}
}

func (x *DumpResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DumpResp) GetCheckpointID() string {
	if x != nil {
		return x.CheckpointID
	}
	return ""
}

func (x *DumpResp) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

func (x *DumpResp) GetState() *ProcessState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *DumpResp) GetDumpStats() *DumpStats {
	if x != nil {
		return x.DumpStats
	}
	return nil
}

type RestoreResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string        `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	NewPID       int32         `protobuf:"varint,2,opt,name=NewPID,proto3" json:"NewPID,omitempty"`
	State        *ProcessState `protobuf:"bytes,3,opt,name=State,proto3" json:"State,omitempty"`
	RestoreStats *RestoreStats `protobuf:"bytes,6,opt,name=RestoreStats,proto3" json:"RestoreStats,omitempty"`
}

func (x *RestoreResp) Reset() {
	*x = RestoreResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_task_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreResp) ProtoMessage() {}

func (x *RestoreResp) ProtoReflect() protoreflect.Message {
	mi := &file_agent_task_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreResp.ProtoReflect.Descriptor instead.
func (*RestoreResp) Descriptor() ([]byte, []int) {
	return file_agent_task_proto_rawDescGZIP(), []int{20}
}

func (x *RestoreResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RestoreResp) GetNewPID() int32 {
	if x != nil {
		return x.NewPID
	}
	return 0
}

func (x *RestoreResp) GetState() *ProcessState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *RestoreResp) GetRestoreStats() *RestoreStats {
	if x != nil {
		return x.RestoreStats
	}
	return nil
}

var File_agent_task_proto protoreflect.FileDescriptor

var file_agent_task_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1a, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x09,
	0x67, 0x70, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x1a, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x47, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x7c, 0x0a, 0x10, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x72, 0x69, 0x75, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x75, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x46, 0x0a, 0x0e, 0x47, 0x50, 0x55, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x67, 0x70, 0x75, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x47, 0x50, 0x55, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x90, 0x06, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x55,
	0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x50, 0x55, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x47, 0x50, 0x55,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x4a, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x40,
	0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3d, 0x0a, 0x07, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43,
	0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x46, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x49, 0x44, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x55, 0x49, 0x44, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x47,
	0x49, 0x44, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x47, 0x49, 0x44, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xf0, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x07, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x54, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0f, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x4f,
	0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x0e, 0x0a, 0x02, 0x46, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x46, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x22, 0x39, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x44, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x45, 0x52,
	0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x22, 0xfa, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x46, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x46, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x05,
	0x4c, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x4c,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x52, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x52, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x49, 0x44, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x04, 0x55, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x22, 0x2a, 0x0a, 0x04, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x6b, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x94, 0x02, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x4f, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x24, 0x0a, 0x0d, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x07, 0x43,
	0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x43, 0x50, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x1a,
	0x0a, 0x08, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x49, 0x44, 0x22, 0x54, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x55, 0x73, 0x65, 0x64, 0x22, 0xc2, 0x03, 0x0a, 0x09, 0x44, 0x75, 0x6d,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x44, 0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x52, 0x49, 0x55, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x52, 0x49, 0x55, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x50, 0x55, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x47, 0x50, 0x55,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x58, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x13, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xef, 0x03,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40,
	0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75,
	0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x58, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x52, 0x49, 0x55, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x52, 0x49, 0x55,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x50, 0x55, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x47,
	0x50, 0x55, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x47, 0x50, 0x55,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x67, 0x70, 0x75, 0x2e, 0x47,
	0x50, 0x55, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f,
	0x47, 0x50, 0x55, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x45, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x44, 0x69, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x52, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x47, 0x50, 0x55, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x63, 0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x54, 0x63, 0x70,
	0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x22, 0x9f, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43,
	0x52, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x47,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x47, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x63, 0x70, 0x45, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x54,
	0x63, 0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xe9, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x09,
	0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75, 0x6d,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x65, 0x77, 0x50, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x65, 0x77,
	0x50, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2a, 0x5c, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x70, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4a,
	0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x4f, 0x42, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x4f, 0x42, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x4f, 0x42, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x05, 0x2a, 0x2c, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x52, 0x49, 0x4f, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x44, 0x10, 0x01, 0x2a,
	0x1f, 0x0a, 0x06, 0x43, 0x52, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x01,
	0x2a, 0x37, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x55, 0x4e,
	0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x4f, 0x4f, 0x54, 0x46, 0x53, 0x10, 0x03, 0x32, 0xbd, 0x03, 0x0a, 0x0b, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x36, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x65, 0x64, 0x61,
	0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x08, 0x4b, 0x61, 0x74, 0x61, 0x44, 0x75, 0x6d, 0x70,
	0x12, 0x24, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75,
	0x6d, 0x70, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x24, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x0b,
	0x4b, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x65,
	0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x27, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6a, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x2e, 0x63, 0x65, 0x64,
	0x61, 0x6e, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x65, 0x64, 0x61, 0x6e,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x2f, 0x63,
	0x65, 0x64, 0x61, 0x6e, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agent_task_proto_rawDescOnce sync.Once
	file_agent_task_proto_rawDescData = file_agent_task_proto_rawDesc
)

func file_agent_task_proto_rawDescGZIP() []byte {
	file_agent_task_proto_rawDescOnce.Do(func() {
		file_agent_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_task_proto_rawDescData)
	})
	return file_agent_task_proto_rawDescData
}

var file_agent_task_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_agent_task_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_agent_task_proto_goTypes = []interface{}{
	(CheckpointState)(0),                // 0: cedana.services.agent_task.CheckpointState
	(JobState)(0),                       // 1: cedana.services.agent_task.JobState
	(ContainerRuntime)(0),               // 2: cedana.services.agent_task.ContainerRuntime
	(CRType)(0),                         // 3: cedana.services.agent_task.CRType
	(DumpType)(0),                       // 4: cedana.services.agent_task.DumpType
	(OpenFilesStat_StreamType)(0),       // 5: cedana.services.agent_task.OpenFilesStat.StreamType
	(*DetailedHealthCheckRequest)(nil),  // 6: cedana.services.agent_task.DetailedHealthCheckRequest
	(*DetailedHealthCheckResponse)(nil), // 7: cedana.services.agent_task.DetailedHealthCheckResponse
	(*HealthCheckStats)(nil),            // 8: cedana.services.agent_task.HealthCheckStats
	(*GetConfigRequest)(nil),            // 9: cedana.services.agent_task.GetConfigRequest
	(*GetConfigResponse)(nil),           // 10: cedana.services.agent_task.GetConfigResponse
	(*ProcessState)(nil),                // 11: cedana.services.agent_task.ProcessState
	(*ProcessInfo)(nil),                 // 12: cedana.services.agent_task.ProcessInfo
	(*OpenFilesStat)(nil),               // 13: cedana.services.agent_task.OpenFilesStat
	(*ConnectionStat)(nil),              // 14: cedana.services.agent_task.ConnectionStat
	(*Addr)(nil),                        // 15: cedana.services.agent_task.Addr
	(*RemoteState)(nil),                 // 16: cedana.services.agent_task.RemoteState
	(*HostInfo)(nil),                    // 17: cedana.services.agent_task.HostInfo
	(*CPUInfo)(nil),                     // 18: cedana.services.agent_task.CPUInfo
	(*MemoryInfo)(nil),                  // 19: cedana.services.agent_task.MemoryInfo
	(*DumpStats)(nil),                   // 20: cedana.services.agent_task.DumpStats
	(*RestoreStats)(nil),                // 21: cedana.services.agent_task.RestoreStats
	(*CheckpointFileStats)(nil),         // 22: cedana.services.agent_task.CheckpointFileStats
	(*DumpArgs)(nil),                    // 23: cedana.services.agent_task.DumpArgs
	(*RestoreArgs)(nil),                 // 24: cedana.services.agent_task.RestoreArgs
	(*DumpResp)(nil),                    // 25: cedana.services.agent_task.DumpResp
	(*RestoreResp)(nil),                 // 26: cedana.services.agent_task.RestoreResp
	(*gpu.HealthCheckResponse)(nil),     // 27: cedanagpu.HealthCheckResponse
	(*gpu.GPURestoreStats)(nil),         // 28: cedanagpu.GPURestoreStats
}
var file_agent_task_proto_depIdxs = []int32{
	8,  // 0: cedana.services.agent_task.DetailedHealthCheckResponse.HealthCheckStats:type_name -> cedana.services.agent_task.HealthCheckStats
	27, // 1: cedana.services.agent_task.HealthCheckStats.GPUHealthCheck:type_name -> cedanagpu.HealthCheckResponse
	12, // 2: cedana.services.agent_task.ProcessState.ProcessInfo:type_name -> cedana.services.agent_task.ProcessInfo
	0,  // 3: cedana.services.agent_task.ProcessState.CheckpointState:type_name -> cedana.services.agent_task.CheckpointState
	1,  // 4: cedana.services.agent_task.ProcessState.JobState:type_name -> cedana.services.agent_task.JobState
	16, // 5: cedana.services.agent_task.ProcessState.RemoteState:type_name -> cedana.services.agent_task.RemoteState
	17, // 6: cedana.services.agent_task.ProcessState.HostInfo:type_name -> cedana.services.agent_task.HostInfo
	18, // 7: cedana.services.agent_task.ProcessState.CPUInfo:type_name -> cedana.services.agent_task.CPUInfo
	19, // 8: cedana.services.agent_task.ProcessState.MemoryInfo:type_name -> cedana.services.agent_task.MemoryInfo
	13, // 9: cedana.services.agent_task.ProcessInfo.OpenFds:type_name -> cedana.services.agent_task.OpenFilesStat
	14, // 10: cedana.services.agent_task.ProcessInfo.OpenConnections:type_name -> cedana.services.agent_task.ConnectionStat
	5,  // 11: cedana.services.agent_task.OpenFilesStat.Stream:type_name -> cedana.services.agent_task.OpenFilesStat.StreamType
	15, // 12: cedana.services.agent_task.ConnectionStat.Laddr:type_name -> cedana.services.agent_task.Addr
	15, // 13: cedana.services.agent_task.ConnectionStat.Raddr:type_name -> cedana.services.agent_task.Addr
	4,  // 14: cedana.services.agent_task.DumpStats.DumpType:type_name -> cedana.services.agent_task.DumpType
	2,  // 15: cedana.services.agent_task.DumpStats.ContainerRuntime:type_name -> cedana.services.agent_task.ContainerRuntime
	22, // 16: cedana.services.agent_task.DumpStats.CheckpointFileStats:type_name -> cedana.services.agent_task.CheckpointFileStats
	4,  // 17: cedana.services.agent_task.RestoreStats.DumpType:type_name -> cedana.services.agent_task.DumpType
	2,  // 18: cedana.services.agent_task.RestoreStats.ContainerRuntime:type_name -> cedana.services.agent_task.ContainerRuntime
	22, // 19: cedana.services.agent_task.RestoreStats.CheckpointFileStats:type_name -> cedana.services.agent_task.CheckpointFileStats
	28, // 20: cedana.services.agent_task.RestoreStats.GPURestoreStats:type_name -> cedanagpu.GPURestoreStats
	3,  // 21: cedana.services.agent_task.DumpArgs.Type:type_name -> cedana.services.agent_task.CRType
	3,  // 22: cedana.services.agent_task.RestoreArgs.Type:type_name -> cedana.services.agent_task.CRType
	11, // 23: cedana.services.agent_task.DumpResp.State:type_name -> cedana.services.agent_task.ProcessState
	20, // 24: cedana.services.agent_task.DumpResp.DumpStats:type_name -> cedana.services.agent_task.DumpStats
	11, // 25: cedana.services.agent_task.RestoreResp.State:type_name -> cedana.services.agent_task.ProcessState
	21, // 26: cedana.services.agent_task.RestoreResp.RestoreStats:type_name -> cedana.services.agent_task.RestoreStats
	6,  // 27: cedana.services.agent_task.TaskService.DetailedHealthCheck:input_type -> cedana.services.agent_task.DetailedHealthCheckRequest
	23, // 28: cedana.services.agent_task.TaskService.KataDump:input_type -> cedana.services.agent_task.DumpArgs
	24, // 29: cedana.services.agent_task.TaskService.KataRestore:input_type -> cedana.services.agent_task.RestoreArgs
	9,  // 30: cedana.services.agent_task.TaskService.GetConfig:input_type -> cedana.services.agent_task.GetConfigRequest
	7,  // 31: cedana.services.agent_task.TaskService.DetailedHealthCheck:output_type -> cedana.services.agent_task.DetailedHealthCheckResponse
	25, // 32: cedana.services.agent_task.TaskService.KataDump:output_type -> cedana.services.agent_task.DumpResp
	26, // 33: cedana.services.agent_task.TaskService.KataRestore:output_type -> cedana.services.agent_task.RestoreResp
	10, // 34: cedana.services.agent_task.TaskService.GetConfig:output_type -> cedana.services.agent_task.GetConfigResponse
	31, // [31:35] is the sub-list for method output_type
	27, // [27:31] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_agent_task_proto_init() }
func file_agent_task_proto_init() {
	if File_agent_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_agent_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedHealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedHealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenFilesStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointFileStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_task_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_task_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_agent_task_proto_goTypes,
		DependencyIndexes: file_agent_task_proto_depIdxs,
		EnumInfos:         file_agent_task_proto_enumTypes,
		MessageInfos:      file_agent_task_proto_msgTypes,
	}.Build()
	File_agent_task_proto = out.File
	file_agent_task_proto_rawDesc = nil
	file_agent_task_proto_goTypes = nil
	file_agent_task_proto_depIdxs = nil
}
